"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const fs_1 = require("fs");
const colors_1 = __importDefault(require("./colors"));
const baseUrl = () => {
    const port = process.env.SDK_SPEAK_PORT;
    if (port) {
        return `http://127.0.0.1:${port}`;
    }
    else {
        console.log(`
Looks like you don't have the SDK ${colors_1.default.errorRed('daemon')} running, which this SDK version needs to function. This generally means one of two things:

${colors_1.default.bold('1)')} Your ${colors_1.default.callOutCyan('ops.yml')} file has the wrong SDK level for the current command. Make sure that it includes the line:

${colors_1.default.actionBlue('    sdk: "2"')}

${colors_1.default.bold('2)')} Your ${colors_1.default.callOutCyan('Dockerfile')} does not specify a ${colors_1.default.callOutCyan('CTO.ai')} base image for your final container. For this SDK, it should be:

${colors_1.default.actionBlue('FROM registry.cto.ai/official_images/node:latest')}
`);
        throw 'Error contacting daemon!';
    }
};
function processAxiosError(err) {
    if (err.response) {
        return {
            status: err.response.status,
            data: err.response.data,
        };
    }
    return err;
}
exports.prompt = async (data) => {
    let daemonResponse;
    try {
        daemonResponse = await axios_1.default.post(baseUrl() + '/prompt', data);
    }
    catch (err) {
        throw processAxiosError(err);
    }
    return JSON.parse(fs_1.readFileSync(daemonResponse.data.replyFilename, 'utf8'));
};
exports.getSecret = async (key, hidden) => {
    let daemonResponse;
    try {
        daemonResponse = await axios_1.default.post(baseUrl() + '/secret/get', {
            key,
            hidden,
        });
    }
    catch (err) {
        throw processAxiosError(err);
    }
    return JSON.parse(fs_1.readFileSync(daemonResponse.data.replyFilename, 'utf8'));
};
exports.setSecret = async (key, value) => {
    let daemonResponse;
    try {
        daemonResponse = await axios_1.default.post(baseUrl() + '/secret/set', { key, value });
    }
    catch (err) {
        throw processAxiosError(err);
    }
    return JSON.parse(fs_1.readFileSync(daemonResponse.data.replyFilename, 'utf8'));
};
exports.getKV = async (endpoint, key) => {
    let daemonResponse;
    try {
        daemonResponse = await axios_1.default.post(baseUrl() + '/' + endpoint, { key });
    }
    catch (err) {
        throw processAxiosError(err);
    }
    return daemonResponse.data.value;
};
exports.getKVAll = async (endpoint) => {
    let daemonResponse;
    try {
        daemonResponse = await axios_1.default.post(baseUrl() + '/' + endpoint, {});
    }
    catch (err) {
        throw processAxiosError(err);
    }
    return daemonResponse.data.value;
};
exports.deleteKV = async (endpoint, key) => {
    let daemonResponse;
    try {
        daemonResponse = await axios_1.default.post(baseUrl() + '/' + endpoint, { key });
    }
    catch (err) {
        throw processAxiosError(err);
    }
    return daemonResponse.data.value;
};
exports.events = async (start, end) => {
    let daemonResponse;
    try {
        daemonResponse = await axios_1.default.post(baseUrl() + '/events', { start, end });
    }
    catch (err) {
        throw processAxiosError(err);
    }
    return daemonResponse.data.value;
};
exports.getUser = async () => {
    try {
        const daemonResponse = await axios_1.default.get(baseUrl() + '/user');
        const { id, username, email } = daemonResponse.data.value;
        return { id, username, email };
    }
    catch (err) {
        throw processAxiosError(err);
    }
};
exports.getTeam = async () => {
    try {
        const daemonResponse = await axios_1.default.get(baseUrl() + '/team');
        const { id, name } = daemonResponse.data.value;
        return { id, name };
    }
    catch (err) {
        throw processAxiosError(err);
    }
};
function sendRequest(endpoint) {
    return async (data) => {
        try {
            await axios_1.default.post(`${baseUrl()}/${endpoint}`, data);
        }
        catch (err) {
            throw processAxiosError(err);
        }
    };
}
exports.print = sendRequest('print');
exports.start = sendRequest('start-spinner');
exports.stop = sendRequest('stop-spinner');
exports.startProgress = sendRequest('progress-bar/start');
exports.advanceProgress = sendRequest('progress-bar/advance');
exports.stopProgress = sendRequest('progress-bar/stop');
exports.track = sendRequest('track');
exports.startOp = sendRequest('track');
exports.setState = sendRequest('state/set');
exports.setConfig = sendRequest('config/set');
