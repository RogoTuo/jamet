"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const child_process_1 = __importDefault(require("child_process"));
const request = __importStar(require("./request"));
const types_1 = require("./types");
const errors_1 = __importDefault(require("./errors"));
const pExec = util_1.default.promisify(child_process_1.default.exec);
async function exec(command, options = {}) {
    const childEnv = options.env
        ? Object.assign({}, options.env, process.env) : process.env;
    if (options.spawn) {
        return child_process_1.default.spawn(command, { env: childEnv, shell: true });
    }
    else {
        return await pExec(command, { env: childEnv });
    }
}
exports.exec = exec;
function getHostOS() {
    return process.env.OPS_HOST_PLATFORM || 'unknown';
}
exports.getHostOS = getHostOS;
function getInterfaceType() {
    return process.env.SDK_INTERFACE_TYPE || types_1.Interfaces.Terminal;
}
exports.getInterfaceType = getInterfaceType;
function homeDir() {
    return process.env.SDK_HOME_DIR || '/root';
}
exports.homeDir = homeDir;
function log(...args) {
    console.log(...args);
}
exports.log = log;
// DEPRECATED: not useful without deprecated workflows feature
function getStatePath() {
    return path_1.default.resolve(process.env.SDK_STATE_DIR || '');
}
exports.getStatePath = getStatePath;
// DEPRECATED: not useful with the current config API
function getConfigPath() {
    return path_1.default.resolve(process.env.SDK_CONFIG_DIR || '');
}
exports.getConfigPath = getConfigPath;
// DEPRECATED: not useful without deprecated workflows feature
async function setState(key, value) {
    await request.setState({ key, value });
    return request.getKVAll('state/get-all');
}
exports.setState = setState;
// DEPRECATED: not useful without deprecated workflows feature
async function getAllState() {
    return request.getKVAll('state/get-all');
}
exports.getAllState = getAllState;
// DEPRECATED: not useful without deprecated workflows feature
async function getState(key) {
    return request.getKV('state/get', key);
}
exports.getState = getState;
async function setConfig(key, value) {
    await request.setConfig({ key, value });
    return request.getKVAll('config/get-all');
}
exports.setConfig = setConfig;
async function getConfig(key) {
    return request.getKV('config/get', key);
}
exports.getConfig = getConfig;
async function getAllConfig() {
    return request.getKVAll('config/get-all');
}
exports.getAllConfig = getAllConfig;
async function deleteConfig(key) {
    return request.deleteKV('config/delete', key);
}
exports.deleteConfig = deleteConfig;
async function getSecret(key, hidden = true) {
    return await request.getSecret(key, hidden);
}
exports.getSecret = getSecret;
async function setSecret(key, value) {
    return await request.setSecret(key, value);
}
exports.setSecret = setSecret;
// We expect to add an 'event' field soon
async function track(tags, metadata) {
    try {
        await request.track(Object.assign({ tags: Array.isArray(tags) ? tags : [tags] }, metadata));
    }
    catch (e) {
        throw new errors_1.default(100, 'sdk.track');
    }
}
exports.track = track;
async function events(start, end) {
    return await request.events(start, end || new Date().toISOString());
}
exports.events = events;
async function start(workflowName) {
    try {
        await request.startOp({
            tags: ["trigger"],
            trigger: true,
            workflowName
        });
    }
    catch (e) {
        throw new errors_1.default(100, 'sdk.start');
    }
}
exports.start = start;
async function user() {
    return request.getUser();
}
exports.user = user;
async function team() {
    return request.getTeam();
}
exports.team = team;
