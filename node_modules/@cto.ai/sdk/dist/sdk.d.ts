/// <reference types="node" />
import childProcess from 'child_process';
import { Interfaces } from './types';
export interface Env {
    [key: string]: string | undefined;
}
export interface ExecOptions {
    spawn?: boolean;
    env?: Env;
}
export declare function exec(command: string, options?: ExecOptions): Promise<{
    stdout: string;
    stderr: string;
} | childProcess.ChildProcess>;
export declare function getHostOS(): string;
export declare function getInterfaceType(): Interfaces;
export declare function homeDir(): string;
export declare function log(...args: any[]): void;
export declare function getStatePath(): string;
export declare function getConfigPath(): string;
export declare function setState(key: string, value: any): Promise<void>;
export declare function getAllState(): Promise<any>;
export declare function getState(key: string): Promise<any>;
export declare function setConfig(key: string, value: string): Promise<void>;
export declare function getConfig(key: string): Promise<string>;
export declare function getAllConfig(): Promise<object>;
export declare function deleteConfig(key: string): Promise<boolean>;
export declare function getSecret(key: string, hidden?: boolean): Promise<any>;
export declare function setSecret(key: string, value: string): Promise<any>;
export declare function track(tags: string[] | string, metadata: object): Promise<void>;
export declare function events(start: string, end?: string): Promise<any>;
export declare function start(workflowName: string): Promise<void>;
export declare function user(): Promise<any>;
export declare function team(): Promise<any>;
