"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_ux_1 = __importDefault(require("cli-ux"));
const terminal_link_1 = __importDefault(require("terminal-link"));
const types_1 = require("./types");
const colors_1 = __importDefault(require("./colors"));
const request = __importStar(require("./request"));
const sdk_1 = require("./sdk");
const { table, tree } = cli_ux_1.default;
function url(text, url) {
    // sdk.track(['UX', 'url'], { text, url });
    return terminal_link_1.default(colors_1.default.multiBlue(text), url);
}
async function print(text) {
    await request.print({
        text,
    });
}
async function prompt(questions) {
    let answersObject = {};
    if (Array.isArray(questions)) {
        for (const question of questions) {
            const response = await request.prompt(question);
            answersObject = Object.assign({}, answersObject, response);
        }
        return answersObject;
    }
    answersObject = await request.prompt(questions);
    return answersObject;
}
async function start(text) {
    await request.start({
        text,
    });
}
async function stop(text) {
    await request.stop({
        text,
    });
}
async function wait(duration) {
    await cli_ux_1.default.wait(duration);
}
function init() {
    return { start: startProgress, increment: advance, stop: stopProgress };
}
async function startProgress(length, initial, message) {
    await request.startProgress({ length, initial, text: message });
}
async function advance(increment) {
    await request.advanceProgress({ increment });
}
async function stopProgress(message) {
    await request.stopProgress({ text: message });
}
function bold(text) {
    return sdk_1.getInterfaceType() == types_1.Interfaces.Slack
        ? `*${text}*`
        : colors_1.default.bold(text);
}
function italic(text) {
    return sdk_1.getInterfaceType() == types_1.Interfaces.Slack
        ? `_${text}_`
        : colors_1.default.italic(text);
}
exports.default = {
    print,
    prompt,
    colors: colors_1.default,
    spinner: {
        start,
        stop,
    },
    wait,
    url,
    table,
    tree,
    bold,
    italic,
    progress: { init },
};
